/*
 * Copyright (c) 2017 Jean Guyomarc'h
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include "Envim.h"

typedef Eina_Bool(*f_decode)(s_nvim *nvim, const s_request *req, const msgpack_object_array *args);


{% for function in functions %}
static Eina_Bool
_decode_{{ function.name }}(s_nvim *nvim, const s_request *req, const msgpack_object_array *args)
{
{%- if function.return_type == "void" %}
   (void) args; /* Unused, no arguments are supposed to be passed */
   return {{ function.name }}_handler(nvim, req);
{% elif function.return_type == "Eina_Bool" %}
   return {{ function.name }}_handler(nvim, req, pack_boolean_get(args));
{% elif function.return_type == "t_int" %}
   return {{ function.name }}_handler(nvim, req, pack_int_get(args));
{% elif function.return_type == "s_position" %}
   return {{ function.name }}_handler(nvim, req, pack_position_get(args));
{% elif function.return_type == "s_object*" %}
   return {{ function.name }}_handler(nvim, req, pack_object_get(args));
{% elif function.return_type == "s_tabpage*" %}
   return {{ function.name }}_handler(nvim, req, pack_tabpage_get(args));
{% elif function.return_type == "s_buffer*" %}
   return {{ function.name }}_handler(nvim, req, pack_buffer_get(args));
{% elif function.return_type == "s_window*" %}
   return {{ function.name }}_handler(nvim, req, pack_window_get(args));
{% elif function.return_type == "Eina_Stringshare*" %}
   return {{ function.name }}_handler(nvim, req, pack_stringshare_get(args));
{% else %}
   CRI("Unimplemented");
   return EINA_FALSE;
   (void) nvim;
   (void) req;
   (void) args;
{% endif -%}
}
{% endfor %}


static const f_decode _decoders[__REQUEST_LAST] =
{
{%- for function in functions %}
   [{{ function.request }}] = _decode_{{ function.name }},
{%- endfor %}
};

Eina_Bool
nvim_api_response_dispatch(s_nvim *nvim,
                           const s_request *req,
                           const msgpack_object_array *args)
{
   return (_decoders[req->type])(nvim, req, args);
}


/*============================================================================*
 *                                   Helpers                                  *
 *============================================================================*/

static void
_prepare_request(s_nvim *nvim,
                 const s_request *req,
                 const char *rpc_name,
                 size_t rpc_name_len)
{
   /* Keep the request around */
   nvim->requests = eina_list_append(nvim->requests, req);

   msgpack_packer *const pk = &nvim->packer;

   /*
    * Pack the message! It is an array of four (4) items:
    *  - the rpc type:
    *    - 0 is a request
    *  - the unique identifier for a request
    *  - the method (API string)
    *  - the arguments count as an array.
    */
   msgpack_pack_array(pk, 4);
   msgpack_pack_int(pk, 0);
   msgpack_pack_uint64(pk, req->uid);
   msgpack_pack_bin(pk, rpc_name_len);
   msgpack_pack_bin_body(pk, rpc_name, rpc_name_len);
}

static Eina_Bool
_send_request(s_nvim *nvim)
{
   /* Finally, send that to the slave neovim process */
   const Eina_Bool ok = ecore_exe_send(
      nvim->exe, nvim->sbuffer.data, (int)nvim->sbuffer.size
   );
   if (EINA_UNLIKELY(! ok))
     {
        CRI("Failed to send %zu bytes to neovim", nvim->sbuffer.size);
        return EINA_FALSE;
     }
   return EINA_TRUE;
}


/*============================================================================*
 *                        Generated API to initiate RPC                       *
 *============================================================================*/

{% for function in functions %}
Eina_Bool
{{ function.name }}(s_nvim *nvim 
{%- for type, name in function.c_parameters -%}
   , {{ type }} {{ name }}
{%- endfor -%})
{
   EINA_SAFETY_ON_NULL_RETURN_VAL(nvim, EINA_FALSE);

   s_request *const req = request_new(nvim_get_next_uid(nvim), {{ function.request }});
   _prepare_request(nvim, req, "{{ function.name }}", sizeof("{{ function.name }}") - 1);

   msgpack_packer *const pk = &nvim->packer;
   msgpack_pack_array(pk, {{ function.parameters_count }});
   {%- for type, name in function.parameters %}
   {{ packers[type] }}(pk, {{ name }});
   {%- endfor %}

   return _send_request(nvim);
}
{% endfor %}
