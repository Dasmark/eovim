/*
 * Copyright (c) 2017 Jean Guyomarc'h
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/*
 * This is a generated file.
 */

#include "Envim.h"

typedef Eina_Bool(*f_decode)(s_nvim *nvim, const s_request *req, const msgpack_object_array *args);
typedef void (*f_dispatch)(s_nvim *nvim, Eina_List *args);

static int _api_log_dom = -1;
static Eina_Hash *_callbacks = NULL;

#undef DBG
#undef INF
#undef WRN
#undef ERR
#undef CRI
#define DBG(...) EINA_LOG_DOM_DBG(_api_log_dom, __VA_ARGS__)
#define INF(...) EINA_LOG_DOM_INFO(_api_log_dom, __VA_ARGS__)
#define WRN(...) EINA_LOG_DOM_WARN(_api_log_dom, __VA_ARGS__)
#define ERR(...) EINA_LOG_DOM_ERR(_api_log_dom, __VA_ARGS__)
#define CRI(...) EINA_LOG_DOM_CRIT(_api_log_dom, __VA_ARGS__)


{% for ui_event in ui_events %}
static void
_dispatch_{{ ui_event.c_name }}(s_nvim *nvim, Eina_List *args)
{
{%- if ui_event.parameters_count == 0 %}
   {{ ui_event.c_name }}(nvim);
   (void) args;
{%- else %}
   const unsigned int args_count = eina_list_count(args);
   const unsigned int expected_count = {{ ui_event.parameters | length }};
   if (EINA_UNLIKELY(args_count != expected_count))
     {
        CRI("Received %u arguments but %u were expected", args_count, expected_count);
        return;
     }
   {{ ui_event.c_name }}(nvim
   {%- for type, name in ui_event.parameters %}
   {%- if loop.first %} {# For the first item, we access the head list #}
      , {{ dispatchers[type] }}(eina_list_data_get(args))
   {%- elif loop.last %} {# Last item: access the last data directly #}
      , {{ dispatchers[type] }}(eina_list_last_data_get(args))
   {%- else %}
      , {{ dispatchers[type] }}(eina_list_data_get(eina_list_nth(args, {{ loop.index0 }})))
   {%- endif -%}
   {%- endfor -%}
   );
{%- endif %}
}
{% endfor %}


{% for function in functions %}
static Eina_Bool
_decode_{{ function.name }}(s_nvim *nvim, const s_request *req, const msgpack_object_array *args)
{
   const f_{{ function.name }} then = (const f_{{ function.name }})(req->then_callback);
   INF("Decoding response to request {{ function.request }}");
{%- if function.return_type == "void" %}
   if (then) { then(nvim, req->callback_data); }
   (void) args; /* Unused, no arguments are supposed to be passed */
{% else %}
   then(nvim, {{ unpackers[function.return_type] }}(args), req->callback_data);
{% endif %}
   return EINA_TRUE;
}
{% endfor %}


static const f_decode _decoders[__REQUEST_LAST] =
{
{%- for function in functions %}
   [{{ function.request }}] = _decode_{{ function.name }},
{%- endfor %}
};

Eina_Bool
nvim_api_response_dispatch(s_nvim *nvim,
                           const s_request *req,
                           const msgpack_object_array *args)
{
   return (_decoders[req->type])(nvim, req, args);
}

Eina_Bool
nvim_api_init(void)
{
   _api_log_dom = eina_log_domain_register("envim-api", EINA_COLOR_LIGHTBLUE);
   if (EINA_UNLIKELY(_api_log_dom < 0))
     {
        EINA_LOG_DOM_CRIT(_envim_log_domain, "Failed to create log domain");
        goto fail;
     }

   /* Generate a hash table that will contain the callbacks to be called for
    * each event sent by neovim. */
   _callbacks = eina_hash_stringshared_new(NULL);
   if (EINA_UNLIKELY(! _callbacks))
     {
        CRI("Failed to create hash table to hold callbacks");
        goto hash_fail;
     }

{% for ui_event in ui_events %}
   eina_hash_add(_callbacks,
      eina_stringshare_add_length("{{ ui_event.name }}", sizeof("{{ ui_event.name }}") - 1),
      _dispatch_{{ ui_event.c_name }});
{%- endfor %}

   return EINA_TRUE;
hash_fail:
   eina_log_domain_unregister(_api_log_dom);
fail:
   return EINA_FALSE;
}

void
nvim_api_shutdown(void)
{
   if (_api_log_dom >= 0)
     {
        eina_log_domain_unregister(_api_log_dom);
        _api_log_dom = -1;
     }
}

/*============================================================================*
 *                                   Helpers                                  *
 *============================================================================*/

static void
_prepare_request(s_nvim *nvim,
                 const s_request *req,
                 const char *rpc_name,
                 size_t rpc_name_len)
{
   /* Clear the serialization buffer before pushing a new request */
   msgpack_sbuffer_clear(&nvim->sbuffer);

   /* Keep the request around */
   nvim->requests = eina_list_append(nvim->requests, req);

   msgpack_packer *const pk = &nvim->packer;
   /*
    * Pack the message! It is an array of four (4) items:
    *  - the rpc type:
    *    - 0 is a request
    *  - the unique identifier for a request
    *  - the method (API string)
    *  - the arguments count as an array.
    */
   msgpack_pack_array(pk, 4);
   msgpack_pack_int(pk, 0);
   msgpack_pack_uint32(pk, req->uid);
   msgpack_pack_bin(pk, rpc_name_len);
   msgpack_pack_bin_body(pk, rpc_name, rpc_name_len);
}

static Eina_Bool
_send_request(s_nvim *nvim)
{
   /* Finally, send that to the slave neovim process */
   const Eina_Bool ok = ecore_exe_send(
      nvim->exe, nvim->sbuffer.data, (int)nvim->sbuffer.size
   );
   if (EINA_UNLIKELY(! ok))
     {
        CRI("Failed to send %zu bytes to neovim", nvim->sbuffer.size);
        return EINA_FALSE;
     }
   return EINA_TRUE;
}


/*============================================================================*
 *                        Generated API to initiate RPC                       *
 *============================================================================*/

{% for function in functions %}
Eina_Bool
{{ function.name }}(s_nvim *nvim 
{%- for type, name in function.c_parameters -%}
   , {{ type }} {{ name }}
{%- endfor -%}
   , f_{{ function.name }} then_cb, f_request_error error_cb, void *cb_data)
{
   EINA_SAFETY_ON_NULL_RETURN_VAL(nvim, EINA_FALSE);
{%- if function.return_type != "void" %}
   EINA_SAFETY_ON_NULL_RETURN_VAL(then_cb, EINA_FALSE);
{%- endif %}

   s_request *const req = request_new(nvim_get_next_uid(nvim),
                                      {{ function.request }},
                                      (const void *)then_cb,
                                      error_cb, cb_data);
   if (EINA_UNLIKELY(! req))
     {
        CRI("Failed to create request");
        return EINA_FALSE;
     }

   _prepare_request(nvim, req, "{{ function.name }}", sizeof("{{ function.name }}") - 1);

   INF("Sending request {{ function.request }}");

   msgpack_packer *const pk = &nvim->packer;
   msgpack_pack_array(pk, {{ function.parameters_count }});
   {%- for type, name in function.parameters %}
   {{ packers[type] }}(pk, {{ name }});
   {%- endfor %}

   return _send_request(nvim);
}
{% endfor %}


/*============================================================================*
 *                              Event Dispatching                             *
 *============================================================================*/

Eina_Bool
nvim_api_dispatch_event(s_nvim *nvim, Eina_List *args)
{
   /*
    * First step, iterate over all the commands. They are of the form
    *           ["command": [args]]
    * within the list. That's this latter list we are unrolling...
    *
    * We also CONSUME the arguments: they are deallocated as we iterate
    * over them.
    */
   Eina_Value *top_arg;
   EINA_LIST_FREE(args, top_arg)
     {
        /*
         * Within the list of commands, we have a pair command, arguments,
         * within a list. We are not supposed to have anything else than
         * a list at tihs point of unrolling.
         */
        const Eina_Value_Type *const type = eina_value_type_get(top_arg);
        if (EINA_LIKELY(type == EINA_VALUE_TYPE_LIST))
          {
             /* Get the list of arguments (command + its arguments) */
             Eina_Value *cmd_val, *arg_val;
             eina_value_list_get(top_arg, 0, &cmd_val);
             eina_value_list_get(top_arg, 1, &arg_val);

             /* The command is always the first element
              * It is stored as a stringshare.
              */
             if (EINA_UNLIKELY(eina_value_type_get(cmd_val) != EINA_VALUE_TYPE_STRINGSHARE))
               {
                  ERR("First element is not a stringshare!? This is wrong!");
                  continue;
               }
             Eina_Stringshare *cmd;
             eina_value_get(cmd_val, &cmd);
             DBG("Processing command: %s", cmd);

             /* Now that we have a command, call the callback associated to it */
             const f_dispatch func = eina_hash_find(_callbacks, cmd);
             if (EINA_UNLIKELY(! func))
               {
                  CRI("Unregistered callback for command %s", cmd);
                  continue;
               }

             /* The arguments are the second element (a list) */
             if (EINA_UNLIKELY(eina_value_type_get(arg_val) != EINA_VALUE_TYPE_LIST))
               {
                  ERR("Second element is not a list!? This is wrong!");
                  continue;
               }
             Eina_Value_List list_val;
             eina_value_get(arg_val, &list_val);

             /* Now, call the function with its arguments */
             func(nvim, list_val.list);

             /* Dealloc the values we got */
             eina_value_free(cmd_val);
             eina_value_free(arg_val);
          }
        else
          {
             ERR("Mh.... I'm pretty sure this should be a list");
          }
        eina_value_free(top_arg);
     }
   return EINA_TRUE;
}
