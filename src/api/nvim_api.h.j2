/*
 * Copyright (c) 2017 Jean Guyomarc'h
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/*
 * This is a generated file.
 */

#ifndef __ENVIM_NVIM_API_H__
#define __ENVIM_NVIM_API_H__

typedef enum
{
{% for function in functions %}
   {{ function.request }},
{%- endfor %}

   __REQUEST_LAST /* Sentinel */
} e_request;


/*============================================================================*
 *                          Response to RPC requests                          *
 *============================================================================*/

{% for function in functions -%}
   typedef void (*f_{{ function.name }})(s_nvim *nvim
   {%- if function.c_return_type != "void" -%}
      , {{ function.c_return_type }} data
   {%- endif -%});
{% endfor %}

/*============================================================================*
 *                                RPC Requests                                *
 *============================================================================*/
{% for function in functions %}
   Eina_Bool {{ function.name }}(s_nvim *nvim
   {%- for type, name in function.c_parameters -%}
      , {{ type }} {{ name }}
   {%- endfor -%}
   , f_{{ function.name }} then_cb);
{%- endfor %}

#endif /* ! __ENVIM_NVIM_API_H__ */
